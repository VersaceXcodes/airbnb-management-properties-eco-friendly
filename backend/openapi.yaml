|-
openapi: 3.0.0
info:
  title: EcoHost API
  description: API for EcoHost: Airbnb Management for Eco-Friendly Properties
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

  /auth/login:
    post:
      summary: Log in an existing user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

  /users/profile:
    get:
      summary: Retrieve user profile
      operationId: getUserProfile
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
      security:
        - bearerAuth: []

  /users/profile:
    put:
      summary: Update user profile
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileInput"
      responses:
        "200":
          description: User profile updated successfully
      security:
        - bearerAuth: []

  /properties:
    get:
      summary: Retrieve all properties with optional eco-filters
      operationId: getProperties
      parameters:
        - name: eco_rating_min
          in: query
          description: Minimum eco-rating used for filtering listings
          required: false
          schema:
            type: integer
        - name: eco_rating_max
          in: query
          description: Maximum eco-rating used for filtering listings
          required: false
          schema:
            type: integer
        - name: amenities
          in: query
          description: List of desired amenities for filtering
          required: false
          schema:
            type: array
            items:
              type: string
            style: form
            explode: false
        - name: location
          in: query
          description: Preferred location for property search
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Properties retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"

  /properties:
    post:
      summary: Create a new property listing
      operationId: createProperty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePropertyInput"
      responses:
        "201":
          description: Property created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
      security:
        - bearerAuth: []

  /properties/{property_id}:
    get:
      summary: Retrieve specific property details
      operationId: getProperty
      parameters:
        - name: property_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Property details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"

  /properties/{property_id}:
    put:
      summary: Update a property listing
      operationId: updateProperty
      parameters:
        - name: property_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePropertyInput"
      responses:
        "200":
          description: Property updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
      security:
        - bearerAuth: []

  /properties/{property_id}:
    delete:
      summary: Delete a property listing
      operationId: deleteProperty
      parameters:
        - name: property_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Property deleted successfully
      security:
        - bearerAuth: []

  /ratings:
    post:
      summary: Rate a property based on eco-friendliness
      operationId: rateProperty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatePropertyInput"
      responses:
        "201":
          description: Property rated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyRating"
      security:
        - bearerAuth: []

  /inventory:
    get:
      summary: Retrieve inventory management details
      operationId: getInventory
      responses:
        "200":
          description: Inventory details retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"
      security:
        - bearerAuth: []

  /inventory:
    post:
      summary: Add a new item to inventory
      operationId: addToInventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInventoryItemInput"
      responses:
        "201":
          description: Inventory item added successfully
      security:
        - bearerAuth: []

  /feedback:
    post:
      summary: Submit feedback regarding the eco-experience at a property
      operationId: submitFeedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFeedbackInput"
      responses:
        "201":
          description: Feedback submitted successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time

    CreateUserInput:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password_hash:
          type: string
      required:
        - username
        - email
        - password_hash

    Profile:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        bio:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    UpdateProfileInput:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true

    Property:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        location:
          type: string
        eco_rating:
          type: number
        amenities:
          type: array
          items:
            type: string

    CreatePropertyInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        location:
          type: string
        amenities:
          type: array
          items:
            type: string
      required:
        - name
        - description
        - location

    UpdatePropertyInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        location:
          type: string
          nullable: true
        amenities:
          type: array
          items:
            type: string
          nullable: true

    RatePropertyInput:
      type: object
      properties:
        property_id:
          type: string
        eco_rating:
          type: number
      required:
        - property_id
        - eco_rating

    PropertyRating:
      type: object
      properties:
        property_id:
          type: string
        eco_rating:
          type: number

    InventoryItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        quantity:
          type: number

    CreateInventoryItemInput:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: number
      required:
        - name
        - quantity

    CreateFeedbackInput:
      type: object
      properties:
        property_id:
          type: string
        user_id:
          type: string
        feedback:
          type: string
      required:
        - property_id
        - user_id
        - feedback
